buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.11.24'
    }
}

plugins {
    id 'jvm-component'
    id 'java-lang'
    id 'cpp'
    id 'maven-publish'
    id 'org.bven.jniplugin' version '0.0.2'
}

import com.amazonaws.services.s3.transfer.TransferManager

version = '0.0'
group = 'org.bven'

// Process resources task doesn't get created if there aren't any resources; create a placeholder to ensure that it does.
def placeholder = file('src/main/resources/deleteme')
if (!placeholder.parentFile.exists()) {
    placeholder.parentFile.mkdirs()
}
if (!placeholder.exists()) {
    placeholder.createNewFile()
}
placeholder.deleteOnExit()

repositories {
    maven { url "https://jitpack.io" }
}

model {
    platforms {
        ['windows', 'linux', 'osx', 'freebsd-10', 'solaris'].each { os ->
            ['x86', 'x64', 'arm'].each { arch ->
                "$os-$arch" {
                    architecture arch
                    operatingSystem os
                }
            }
        }
    }

    toolChains {
        if (project.hasProperty('vs2015')) {
            //https://discuss.gradle.org/t/automatic-detection-of-visual-studio-community-2015-rc-not-working-properly/10309
            visualCpp(VisualCpp) {
                installDir "C:/Program Files (x86)/Microsoft Visual Studio 14.0"
            }
        }
    }

    components {
        main(JvmLibrarySpec) {
            dependencies {
                module 'com.github.bgorven:Loader:1.0.0'
            }
        }
        Native(JNILibrarySpec) { jniLibSpec ->
            library "main"
            pkg "org.bven.hello"
            classes ["Native"]

            $.platforms.all {
                jniLibSpec.targetPlatform it.name
            }

            binaries.all {
                lib new JNIDependency(project)
                if (project.hasProperty('vs2015') && targetPlatform.operatingSystem.windows) {
                    // https://github.com/couchbase/couchbase-lite-java-native/issues/23
                    cppCompiler.args "/IC:/Program Files (x86)/Windows Kits/10/Include/10.0.10586.0/ucrt"
                    def arch = {if (targetPlatform.architecture.name.contains('arm')) {
                        'arm'
                    } else if (targetPlatform.architecture.name.contains('64')) {
                        'x64'
                    } else {
                        'x86'
                    }}()
                    linker.args "/LIBPATH:C:/Program Files (x86)/Windows Kits/10/Lib/10.0.10586.0/ucrt/${arch}"
                }
            }
        }
    }

    tasks {
        run(JavaExec) {
            def compile = $.tasks.compileMainJarMainJava;
            def jar = $.tasks.createMainJar;
            dependsOn $.tasks.mainJar
            classpath compile.classpath
            classpath jar.outputs
            main = 'org.bven.hello.Native'
        }

        uploadNativeLibs(Task) {
            dependsOn $.tasks.mainJar
            doLast {
                def hash = 'git rev-parse --short HEAD'.execute().text
                println hash
                new TransferManager().uploadDirectory('bgorven-hello', hash, project.file('src/main/resources/lib'), true).waitForCompletion()
            }
        }


        wrapper {
            gradleVersion = '3.0-rc-1'
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication)
        }
    }
}

